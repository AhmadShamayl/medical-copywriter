***DATA COLLECTION***
File Storage 


***CLEANING DATA***
with using re
made function to parse pdfs with these priorities:
marker > pdfplumber > PyPDF2

***CHUNKING***
Used Semantic Chunking Strategy 
Used Qwen 8b - It was a big model
then used Qwen 0.6B - Still It was a big model for my System
then used google's API for google-text-embedding-004 

***VECTOR-DB***
Implemented Chroma DB
Created Batch size of 4000


***RETRIEVING***
Retrieve medical data from NCBI PubMed through their API
Retireve web search Data using Tavily API
The Json Structure for getting data from these APIs are same for langgraph Agent


***MCP***
MCP = hub layer between retrievers and your RAG agent.
Each retriever (Chroma, PubMed, Web) → registers as a “tool”.
MCP normalizes responses into one schema → so your LangGraph agent can consume them without worrying about source differences.


***MEMORY***
Used Hybrid approach to save the memory that will make the system more efficient and cheaper
Used langgraph In Memory Store for memory persistant    
and created memory like user_id = { session_id , turn_count }
                                User ↔ Assistant 
                                        ↓
                                    save_context()  → adds to buffer (short-term)
                                        ↓
                                If turn_count ≥ 10  → _summaraize_memory() → append to summary (long-term)
                                        ↓
                                    save to JSON file

                                On restart:
                                _load_memory() → restore buffer + summary from JSON


                                load_context() → gives summary + last few turns to the model

Saving memory in List 
Sorting out the output in proper json structure



***API***
Implemented Fast API 
and Implemented favicon ico


***UI***
Implemented Streamlit UI 
with FAST API as backend connectivity
with 6 APIs - GET / Root
              POST /start_conversation
              POST /get_response
              POST /ask
              POST /reset_conversation
              GET /sessions
Implemented chat conversation display  and fix sources informations

    
            
    